name= Shakti
version=1.0.0

# Compile variables
# ----------------------
compiler.path={runtime.tools.riscv32-unknown-elf-gcc.path}/bin/
compiler.c.cmd=riscv32-unknown-elf-gcc
compiler.cpp.cmd=riscv32-unknown-elf-g++
compiler.ld.cmd=riscv32-unknown-elf-ld
compiler.ar.cmd=riscv32-unknown-elf-ar
compiler.objcopy.cmd=riscv32-unknown-elf-objcopy
compiler.elf2hex.cmd=riscv32-unknown-elf-objcopy
compiler.size.cmd=riscv32-unknown-elf-size

compiler.mem.cmd = elf2hex

compiler.sdk.path={runtime.platform.path}/cores/arduino/shakti-sdk/bsp

compiler.preproc.flags=-I{build.system.path}/include -I{build.system.path} -I{compiler.sdk.path}/include -I{compiler.sdk.path}/drivers -I{compiler.sdk.path}/third_party/{build.boardenv} -I{compiler.sdk.path}/libs -I{compiler.sdk.path}/third_party/{build.boardenv} -g

compiler.c.flags=-c  -march={build.mcu} -w -fpeel-loops -mcmodel=medany -ffreestanding -std=gnu99 -fno-builtin-printf -fdata-sections -Wall {compiler.preproc.flags} -include sys/cdefs.h -g

compiler.cpp.flags=-c  -march={build.mcu} -w -fpeel-loops -mcmodel=medany -ffreestanding -nostdinc++ -fno-builtin-printf -fdata-sections -fpermissive -Wall -fno-rtti -fno-exceptions {compiler.preproc.flags} -include sys/cdefs.h -g 

compiler.ld.flags=-T {build.ldscript} -nostartfiles -Wl,-N -Wl,--gc-sections

compiler.S.flags=-c -march={build.mcu} {compiler.preproc.flags} -g

compiler.ar.flags=rcs

compiler.objcopy.eep.flags=-O srec

compiler.elf2hex.flags=-R .rel.dyn

compiler.mem.flags=-I{build.path}/output

compiler.define=-DARDUINO=

compiler.c.extra_flags=-DF_CPU=-D{build.board}
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=-DF_CPU=-D{build.board}
compiler.S.extra_flags=-DF_CPU=-D{build.board}
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

# Can be overridden in boards.txt
build.extra_flags=

# USB Flags
# ---------
build.usb_flags=
build.openocdcfg=

# Compile patterns
# ---------------------

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -DARDUINO={runtime.ide.version} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Link gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.ld.flags} {build.extra_flags} {object_files} -nostdlib -Wl,--start-group "{archive_file_path}" -lm -lstdc++ -lc -lgloss -Wl,--end-group -lgcc -o "{build.path}/{build.project_name}.elf"

## Create binary
recipe.objcopy.eep.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} -O binary "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} -O srec "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -B "{build.path}/{build.project_name}.elf"
recipe.size.regex=\s*[0-9]+\s+[0-9]+\s+[0-9]+\s+([0-9]+).*

## Create  .MEM 
recipe.objcopy.mem.pattern="{runtime.platform.path}/uploader/elf2hexspansion.sh" "{runtime.tools.riscv32-unknown-elf-gcc.path}/bin" "{build.path}/{build.project_name}.elf" {build.path} "{runtime.platform.path}/uploader" {runtime.platform.path} {build.boardenv}

# OpenOCD Uploader in RAM
# --------------------
tools.openocd.path={runtime.tools.openocd.path}/bin/
tools.openocd.cmd=openocd
tools.openocd.program.params.verbose=-v
tools.openocd.program.params.quiet=-q
tools.openocd.program.config={runtime.platform.path}/cores/arduino/shakti-sdk/bsp/third_party/{build.boardenv}/ftdi.cfg
tools.openocd.program.pattern="{path}{cmd}" -f {program.config} -c "reset init" -c "load_image {build.path}/{build.project_name}.elf" -c "resume 0x80000000" -c "shutdown" -c "exit"

# OpenOCD Uploader -Flash
# -------------------
tools.openocd_flash.path={runtime.tools.openocd.path}/bin/
tools.openocd_flash.cmd=openocd
tools.openocd_flash.program.params.verbose=-v
tools.openocd_flash.program.params.quiet=-q
tools.openocd_flash.program.config={runtime.platform.path}/cores/arduino/shakti-sdk/bsp/third_party/{build.boardenv}/ftdi.cfg
tools.openocd_flash.program.pattern="{path}{cmd}" -f {program.config} -c "reset init" -c "load_image {build.path}/output/genlib/deploy.shakti" -c "resume 0x80000000" -c "shutdown" -c "exit"